export const countries = [
  { code: '+509', name: 'Haiti', flag: 'üá≠üáπ', minLength: 8, maxLength: 8 },
  { code: '+1', name: 'United States', flag: 'üá∫üá∏', minLength: 10, maxLength: 10 },
  { code: '+1-CA', name: 'Canada', flag: 'üá®üá¶', minLength: 10, maxLength: 10 },
  { code: '+33', name: 'France', flag: 'üá´üá∑', minLength: 9, maxLength: 9 },
  { code: '+34', name: 'Spain', flag: 'üá™üá∏', minLength: 9, maxLength: 9 },
  { code: '+44', name: 'United Kingdom', flag: 'üá¨üáß', minLength: 10, maxLength: 11 },
  { code: '+49', name: 'Germany', flag: 'üá©üá™', minLength: 10, maxLength: 12 },
  { code: '+39', name: 'Italy', flag: 'üáÆüáπ', minLength: 9, maxLength: 11 },
  { code: '+351', name: 'Portugal', flag: 'üáµüáπ', minLength: 9, maxLength: 9 },
  { code: '+54', name: 'Argentina', flag: 'üá¶üá∑', minLength: 10, maxLength: 11 },
  { code: '+55', name: 'Brazil', flag: 'üáßüá∑', minLength: 10, maxLength: 11 },
  { code: '+52', name: 'Mexico', flag: 'üá≤üáΩ', minLength: 10, maxLength: 10 },
  { code: '+57', name: 'Colombia', flag: 'üá®üá¥', minLength: 10, maxLength: 10 },
  { code: '+58', name: 'Venezuela', flag: 'üáªüá™', minLength: 10, maxLength: 10 },
  { code: '+506', name: 'Costa Rica', flag: 'üá®üá∑', minLength: 8, maxLength: 8 },
  { code: '+507', name: 'Panama', flag: 'üáµüá¶', minLength: 8, maxLength: 8 },
  { code: '+593', name: 'Ecuador', flag: 'üá™üá®', minLength: 9, maxLength: 9 },
  { code: '+51', name: 'Peru', flag: 'üáµüá™', minLength: 9, maxLength: 9 },
  { code: '+56', name: 'Chile', flag: 'üá®üá±', minLength: 9, maxLength: 9 },
  { code: '+598', name: 'Uruguay', flag: 'üá∫üáæ', minLength: 8, maxLength: 8 },
  { code: '+595', name: 'Paraguay', flag: 'üáµüáæ', minLength: 9, maxLength: 9 },
  { code: '+591', name: 'Bolivia', flag: 'üáßüá¥', minLength: 8, maxLength: 8 },
  { code: '+86', name: 'China', flag: 'üá®üá≥', minLength: 11, maxLength: 11 },
  { code: '+81', name: 'Japan', flag: 'üáØüáµ', minLength: 10, maxLength: 11 },
  { code: '+82', name: 'South Korea', flag: 'üá∞üá∑', minLength: 10, maxLength: 11 },
  { code: '+91', name: 'India', flag: 'üáÆüá≥', minLength: 10, maxLength: 10 },
  { code: '+7', name: 'Russia', flag: 'üá∑üá∫', minLength: 10, maxLength: 10 },
  { code: '+90', name: 'Turkey', flag: 'üáπüá∑', minLength: 10, maxLength: 10 },
  { code: '+966', name: 'Saudi Arabia', flag: 'üá∏üá¶', minLength: 9, maxLength: 9 },
  { code: '+971', name: 'UAE', flag: 'üá¶üá™', minLength: 9, maxLength: 9 },
  { code: '+234', name: 'Nigeria', flag: 'üá≥üá¨', minLength: 10, maxLength: 10 },
  { code: '+27', name: 'South Africa', flag: 'üáøüá¶', minLength: 9, maxLength: 9 },
  { code: '+212', name: 'Morocco', flag: 'üá≤üá¶', minLength: 9, maxLength: 9 },
  { code: '+216', name: 'Tunisia', flag: 'üáπüá≥', minLength: 8, maxLength: 8 },
  { code: '+213', name: 'Algeria', flag: 'üá©üáø', minLength: 9, maxLength: 9 },
  { code: '+20', name: 'Egypt', flag: 'üá™üá¨', minLength: 10, maxLength: 11 },
  { code: '+61', name: 'Australia', flag: 'üá¶üá∫', minLength: 9, maxLength: 9 },
  { code: '+64', name: 'New Zealand', flag: 'üá≥üáø', minLength: 8, maxLength: 9 },
];

// Fonction pour valider un num√©ro selon son indicatif
export function validatePhoneNumber(countryCode: string, phoneNumber: string): boolean {
  // Nettoyer le num√©ro de t√©l√©phone (enlever espaces, tirets, etc.)
  const cleanNumber = phoneNumber.replace(/[\s\-\(\)]/g, '');
  
  const country = countries.find(c => c.code === countryCode);
  if (!country) return false;
  
  // V√©rifier que le num√©ro ne contient que des chiffres
  if (!/^\d+$/.test(cleanNumber)) return false;
  
  // V√©rifier la longueur
  return cleanNumber.length >= country.minLength && cleanNumber.length <= country.maxLength;
}

// Fonction pour obtenir le message d'erreur
export function getPhoneValidationMessage(countryCode: string, language: 'fr' | 'en' | 'es' = 'fr'): string {
  const country = countries.find(c => c.code === countryCode);
  if (!country) return '';
  
  const messages = {
    fr: `Le num√©ro doit contenir entre ${country.minLength} et ${country.maxLength} chiffres`,
    en: `Number must contain between ${country.minLength} and ${country.maxLength} digits`,
    es: `El n√∫mero debe contener entre ${country.minLength} y ${country.maxLength} d√≠gitos`
  };
  
  return messages[language];
}
